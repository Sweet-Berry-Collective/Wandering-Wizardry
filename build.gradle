plugins {
	id 'java'
	alias libs.plugins.idea.ext
}

version = "${project.version}+mc.${libs.versions.minecraft.get()}"
if (!project.classification.isBlank())
	version += "-${project.classification}"
group = project.maven_group

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	maven {
		name = "Forge"
		url = "https://maven.minecraftforge.net/"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

def awToAt() {
	var exec = "deno run -A ${rootProject.rootDir}/scripts/mod.ts aw_to_at ${rootProject.rootDir}/common ${rootProject.rootDir}/neoforge ${libs.versions.minecraft.get()}".execute()
	println(exec.text)
}

def generate(String type, String input, String output) {
	var exec = "deno run -A ${rootProject.rootDir}/scripts/mod.ts ${type} ${rootProject.rootDir}/data/${input} ${rootProject.rootDir}/common/src/generated/resources/${output}".execute()
	println(exec.text)
}

def generate(String type, String output) {
	generate(type, type, output)
}

def transpile(String input, String output) {
	generate("transpile", input, output)
}

def loot(String input, String output) {
	generate("loot", input, output)
}

tasks.register("generateData") {
	doFirst {
		try {
			generate("lang", "assets/wwizardry/lang")
			generate("tags", "data")
			generate("archex", "staticdata/architecture_extensions")
			loot("basic_block_loot.fennec", "data/wwizardry/loot_tables/blocks")
			generate("bricks", "data/wwizardry/recipes")
			transpile("recipes", "data/wwizardry/recipes")
			transpile("loot", "data/wwizardry/loot_tables")
			transpile("world", "data/wwizardry/worldgen")
			generate("blockstate", "assets/wwizardry/blockstates")
			awToAt()
		} catch (e) {
			e.printStackTrace()
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
	dependsOn "generateData"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}
