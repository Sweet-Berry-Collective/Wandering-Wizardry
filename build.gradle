plugins {
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.version}+mc.${libs.versions.minecraft.get()}"
if (!project.classification.isBlank())
	version += "-${project.classification}"
group = project.maven_group

def test_compat = true

sourceSets {
	main {
		resources {
			srcDir("src/generated/resources")
		}
	}
}

repositories {
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	// We need this for terrablender
	maven {
		name = "ew, forge"
		url = "https://maven.minecraftforge.net/"
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	modImplementation include("com.terraformersmc.terraform-api:terraform-wood-api-v1:7.0.0-beta.1")
	modImplementation include("maven.modrinth:moremcmeta:v1.20.1-4.0.1-fabric")
	modImplementation include("com.github.glitchfiend:TerraBlender-fabric:1.20.1-3.0.0.167")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.1")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.1")
	def emi_version = "1.0.10+1.20.1"
	modCompileOnly "dev.emi:emi-fabric:$emi_version:api"

	if (test_compat) {
		modRuntimeOnly "dev.emi:emi-fabric:$emi_version"
		modRuntimeOnly "maven.modrinth:arch-ex:3.1.1+1.20.1"
		modRuntimeOnly "maven.modrinth:static-data:1.0.1+1.20"
		modRuntimeOnly "maven.modrinth:suspicious-shapes:1.0.0+1.20.1"
	}
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

def generate(String type, String input, String output) {
	println("deno run -A ./scripts/mod.ts ${type} ./data/${input} ./src/generated/resources/${output}".execute().text)
}

def generate(String type, String output) {
	generate(type, type, output)
}

def transpile(String input, String output) {
	generate("transpile", input, output)
}

def loot(String input, String output) {
	generate("loot", input, output)
}

tasks.register("generateData") {
	doFirst {
		generate("lang", "assets/wwizardry/lang")
		generate("tags", "data")
		generate("archex", "staticdata/architecture_extensions")
		loot("basic_block_loot.fennec", "data/wwizardry/loot_tables/blocks")
		generate("bricks", "data/wwizardry/recipes")
		transpile("recipes", "data/wwizardry/recipes")
		transpile("loot", "data/wwizardry/loot_tables")
		transpile("world", "data/wwizardry/worldgen")
		transpile("mod", "")
		generate("blockstate", "assets/wwizardry/blockstates")
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
	dependsOn "generateData"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
}

jar {
	filesMatching('LICENSE') {
		rename '^(LICENSE.*?)(\\..*)?$', "\$1_${archivesBaseName}\$2"
	}
}
